// –§–∏–Ω–∞–Ω—Å–æ–≤–∏ –¥–∞–Ω–Ω–∏
async function showFinances() {
    if (!currentUser) {
        alert('–ì—Ä–µ—à–∫–∞: –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è');
        return;
    }

    // Show finances modal
    document.getElementById('financesModal').style.display = 'block';
    document.getElementById('financesLoading').style.display = 'block';
    document.getElementById('financesError').style.display = 'none';
    document.getElementById('financesData').style.display = 'none';
    document.body.style.overflow = 'hidden';

    try {
        // Fetch financial data from webhook (—Å–µ–≥–∞ –≤–µ—á–µ –æ–±–µ–¥–∏–Ω–µ–Ω–∏ –¥–∞–Ω–Ω–∏)
        const response = await fetch(CONFIG.FINANCES_WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                artist_number: currentUser.artist_number
            })
        });

        document.getElementById('financesLoading').style.display = 'none';

        if (response.ok) {
            const financialData = await response.json();
            displayFinancialData(financialData);
        } else {
            document.getElementById('financesError').style.display = 'block';
        }
    } catch (error) {
        document.getElementById('financesLoading').style.display = 'none';
        document.getElementById('financesError').style.display = 'block';
    }
}

function displayFinancialData(data) {
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–∞–Ω–Ω–∏—Ç–µ –∏–¥–≤–∞—Ç –∫–∞—Ç–æ –º–∞—Å–∏–≤ –∏ –≤–∑–µ–º–∞–º–µ –ø—ä—Ä–≤–∏—è –µ–ª–µ–º–µ–Ω—Ç
    const actualData = Array.isArray(data) ? data[0] : data;
    
    // –ò–∑–≤–ª–∏—á–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç –Ω–æ–≤–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ n8n
    const summary = actualData.summary || {};
    const paymentsHistory = actualData.payments_history || [];
    
    // Update summary cards —Å –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç summary –æ–±–µ–∫—Ç–∞
    document.getElementById('totalTasks').textContent = summary.Tasks || 0;
    document.getElementById('totalAmount').textContent = (summary.Amount || 0).toFixed(2) + ' –ª–≤.';
    document.getElementById('totalPaid').textContent = (summary.Paid || 0).toFixed(2) + ' –ª–≤.';
    document.getElementById('totalToPay').textContent = (summary['To pay now'] || 0).toFixed(2) + ' –ª–≤.';

    // Populate financial cards
    const cardsContainer = document.getElementById('financesCardsContainer');
    cardsContainer.innerHTML = '';

    // –°—ä–∑–¥–∞–≤–∞–º–µ –µ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ —Å—ä—Å summary –¥–∞–Ω–Ω–∏—Ç–µ
    const card = document.createElement('div');
    card.className = 'finance-card';
    
    // Determine status based on PaidAmou_t field
    let statusClass = 'status-no-records';
    let statusText = '–ù—è–º–∞ –∑–∞–ø–∏—Å–∏';
    
    const paidAmount = parseInt(summary.PaidAmou_t) || 0;
    
    if (paidAmount > 0) {
        statusClass = 'status-paid';
        statusText = `${paidAmount} –ü–ª–∞—â–∞–Ω–∏—è`;
    } else if (parseFloat(summary.Paid) > 0) {
        statusClass = 'status-pending';
        statusText = '–í –æ–±—Ä–∞–±–æ—Ç–∫–∞';
    }

    // Format task count display
    const taskCount = parseInt(summary.Tasks) || 0;
    const tasksText = taskCount === 1 ? `${taskCount} –ó–∞–¥–∞–Ω–∏–µ` : `${taskCount} –ó–∞–¥–∞–Ω–∏—è`;

    card.innerHTML = `
        <div class="finance-card-header">
            <div class="tasks-count">${tasksText}</div>
            <div class="status-badge ${statusClass}">${statusText}</div>
        </div>
        
        <div class="finance-amounts">
            <div class="amount-item total">
                <div class="amount-label">–û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç</div>
                <div class="amount-value">${(summary.Amount || 0).toFixed(2)} –ª–≤.</div>
            </div>
            <div class="amount-item paid">
                <div class="amount-label">–ò–∑–ø–ª–∞—Ç–µ–Ω–æ</div>
                <div class="amount-value">${(summary.Paid || 0).toFixed(2)} –ª–≤.</div>
            </div>
            <div class="amount-item to-pay">
                <div class="amount-label">–ó–∞ –∏–∑–ø–ª–∞—â–∞–Ω–µ</div>
                <div class="amount-value">${(summary['To pay now'] || 0).toFixed(2)} –ª–≤.</div>
            </div>
        </div>
    `;
    
    cardsContainer.appendChild(card);

    // Populate payments history —Å –Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω–∏
    displayPaymentsHistory(paymentsHistory);

    document.getElementById('financesData').style.display = 'block';
}

function displayPaymentsHistory(paymentsData) {
    const paymentsContainer = document.getElementById('paymentsHistoryContainer');
    paymentsContainer.innerHTML = '';

    if (!paymentsData || paymentsData.length === 0) {
        paymentsContainer.innerHTML = `
            <div class="no-payments">
                <div class="no-payments-icon">üí≥</div>
                <div class="no-payments-text">–ù—è–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–∏ –ø–ª–∞—â–∞–Ω–∏—è</div>
            </div>
        `;
        return;
    }

    // Sort payments by date (newest first)
    const sortedPayments = paymentsData.sort((a, b) => {
        const dateA = new Date(a.Date || a.CreatedAt);
        const dateB = new Date(b.Date || b.CreatedAt);
        return dateB - dateA;
    });

    sortedPayments.forEach((payment, index) => {
        const paymentCard = document.createElement('div');
        paymentCard.className = 'payment-history-card';
        
        // Format date
        const paymentDate = new Date(payment.Date || payment.CreatedAt);
        const formattedDate = paymentDate.toLocaleDateString('bg-BG', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        // Format amount
        const amount = parseFloat(payment.Amount || 0);
        
        // Get payment notes
        const notes = payment.Notes || '–ù—è–º–∞ –±–µ–ª–µ–∂–∫–∏';
        
        // Get painter name from nested Painters object
        const painterName = payment.Painters ? payment.Painters.Title : '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Ö—É–¥–æ–∂–Ω–∏–∫';

        paymentCard.innerHTML = `
            <div class="payment-card-header">
                <div class="payment-date">üìÖ ${formattedDate}</div>
                <div class="payment-amount">${amount.toFixed(2)} –ª–≤.</div>
            </div>
            <div class="payment-details">
                <div class="payment-notes">üìù ${notes}</div>
            </div>
        `;
        
        // Add animation delay
        paymentCard.style.animationDelay = `${index * 0.1}s`;
        paymentsContainer.appendChild(paymentCard);
    });
}

function closeFinances() {
    document.getElementById('financesModal').style.display = 'none';
    document.body.style.overflow = 'auto';
}